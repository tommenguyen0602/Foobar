
public class Solution{
    public static String solution(int[] xs) {
        String answer = "1";
        int nOfNegative = 0;
        int closestozero = 0;
        int index = 0;
        //find first neg
        int arrsize = xs.length;
        for (int i = 0; i < arrsize; i++) {
            if (xs[i] < 0) {
                if (closestozero == 0 || xs[i] > closestozero) {
                    closestozero = xs[i];
                    index = i;
                }
                nOfNegative++;
            }
        }
        if (nOfNegative % 2 == 0){
            for(int i=0; i<arrsize; i++) {
                if (xs[i] == 0) {
                } else if (xs[i] < 0){
                    answer = multiply(answer ,(Integer.toString(-xs[i])));
                } else if (xs[i] > 0) answer = multiply(answer ,(Integer.toString(xs[i])));
            }
        } else {
            xs[index] = 1;
            for(int i=0; i<arrsize; i++) {
                if (xs[i] == 0) {
                } else if (xs[i] < 0){
                    answer = multiply(answer ,(Integer.toString(-xs[i])));
                } else if (xs[i] > 0) answer = multiply(answer ,(Integer.toString(xs[i])));
            }
        }
        return answer;
    }
    static String multiply(String num1, String num2) {
        int len1 = num1.length();
        int len2 = num2.length();
        int[] result = new int[len1 + len2];
        int index1 = 0;
        int index2 = 0;
        for (int i = len1 - 1; i >= 0; i--) {
            int carry = 0;
            int n1 = num1.charAt(i) - '0';
            index2 = 0;
            for (int j = len2 - 1; j >= 0; j--) {
                int n2 = num2.charAt(j) - '0';

                int sum = n1 * n2 + result[index1 + index2] + carry;
                carry = sum / 10;

                result[index1 + index2] = sum % 10;

                index2++;
            }
            if (carry > 0) result[index1 + index2] += carry;
            index1++;
        }
        int i = result.length - 1;
        while (i >= 0 && result[i] == 0) i--;
        if (i == -1) return "0";
        String s = "";
        while (i >= 0) s += (result[i--]);
        return s;
    }

    public static void optimize(int[] xs){
        for (int i = 0; i < xs.length-2; i = i + 3){
            xs[i] = xs[i] * xs[i+1]*xs[i+2];
            xs[i+1] = 0;
            xs[i+2] = 0;
        }
    }
    public static void main(String[] args) {

        int[] arr = new int[]{-331, 468, -350, -950, 48, -575, 259, 493, 156, -459, 841, 281, 899, 882, 913, -173, -777, 966, -581, -550, 107, 458, 868, 985, 496, -985, -752, 570, -721, -999, -661, 715, 361, -114, 750, -34, 41, 587, -418, -335, 72, 607, -306, 951, 930, -714, -816, -483, -212, 682, 827, 958, 824, 513, -529, 42, 131, 672, 620, -855, 252, 815, -48, 242, 660, 468, 369, -165, -704, -114, 205, -777, 763, -306, 586, -311, 190, -998, 205, -150, -608, 542, 997, -392, 292, 959, 513, -288, 419, 741, 100, -643, -243, -705, -593, 596, 569, 428, 828, -665, -888, 722, 830, 792, -96, -753, -960, 674, 90, -714, 776, -681, -551, -400, 244, 648, 480, -399, 571, -687, 685, -176, -311, 606, -506, 464, 830, 902, -3, -389, -145, 659, -639, 547, 292, 347, 377, 646, 813, 479, 288, 700, -539, 631, -255, 538, -92, 640, -481, -960, -640, -938, 166, -413, 638, -515, -304, 349, -277, -427, 251, -43, -728, -777, 613, 920, 607, -682, 454, 157, -119, -998, -274, 171, 626, 8, 742, -702, 202, -461, -964, -657, 340, 882, 31, 637, -771, 560, 395, -540, -608, 101, -518, 135, -762, 429, 450, 710, -385, 300, 541, 994, -370, -228, 348, -292, 452, -294, 483, 483, 191, -936, 539, 731, 770, -612, -528, 495, 197, 32, 237, -908, -92, 835, 956, 845, 381, -694, -510, 371, -612, -71, -716, 216, -423, 584, 435, 428, 141, -421, -111, -552, -670, 235, 554, -124, 324, -504, -491, -642, -557, 584, 366, -801, 477, 248, 689, 266, 160, 637, -424, 369, 630, -13, -16, -962, -921, 496, 468, 105, -308, -544, 564, -19, 448, -947, -601, -704, 582, 494, 768, -182, 538, -773, -869, 1, 546, -993, -853, -480, -833, -59, 920, 329, -649, 662, 709, 174, 263, -53, -110, 250, 673, -954, 781, -914, 652, -808, 490, 629, 823, 557, -777, 379, 581, 170, -973, 920, 697, 471, 476, 219, -78, -345, 940, -907, -568, 204, 831, -439, -257, 48, -189, -248, -882, 353, -913, -444, 946, 917, 829, -711, 773, -671, -220, 435, -941, 251, -314, 335, 319, 599, 243, -351, -684, -188, -315, 543, -926, -584, -719, 555, -536, 46, 353, -783, 604, -698, 397, 106, -955, 424, -361, 854, -530, 845, 521, 449, 904, -199, 549, 180, 171, 890, -727, -144, -925, 60, 636, -630, -226, -722, -54, 753, 127, 321, 655, 20, -435, -816, 416, -930, 774, 145, -301, -572, -822, -448, -779, -951, 390, -88, 766, -887, 277, 3, -60, -165, 291, 899, -959, 310, 473, 970, 221, 959, 751, 315, -958, 83, 486, -563, 522, -127, -332, 877, 4, 910, 646, 530, 459, -493, 316, 752, -319, -959, -838, 643, -227, -92, 770, 978, -771, -704, 623, 895, 880, 460, 11, -146, -131, 589, 804, 987, 907, -122, 915, 727, 25, -908, -304, 579, 529, 598, 858, -676, -668, 555, 212, 696, 692, -392, 301, 257, 32, 214, 97, 977, 494, 32, -101, 582, 515, 824, -838, 262, 673, -531, -994, 718};
        long begin = System.currentTimeMillis();
        optimize(arr);
        System.out.println(solution(arr));
        long end = System.currentTimeMillis();
        System.out.println(end-begin);

    }
}